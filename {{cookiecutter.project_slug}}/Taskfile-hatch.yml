# SPDX-FileCopyrightText: 2024 Roy Wright
#
# SPDX-License-Identifier: MIT

version: "3"

tasks:
  init:
    desc: initialize new project (only run once upon first creation of project).
    cmds:
      - git init .
      - git add docs LICENSES scripts src tests .gitignore
        .pre-commit-config.yaml DEV-README.md mkdocs.yml pyproject.toml
        README.md Taskfile-hatch.yml Taskfile-poetry.yml tox.ini
      # Realizing the template can mess up formatting of the files
      - pre-commit run blacken-docs --all-files >/dev/null || true
      - pre-commit run trailing-whitespace --all-files >/dev/null || true
      - pre-commit run prettier --all-files >/dev/null || true
      - pre-commit run ruff --all-files >/dev/null || true
      - git commit -m "Initial Framework."
      - task: update-venv
    status:
      - # do not run the init task if there is a .git/ directory
      - test -d .git

  default:
    cmds:
      - task --list

  show-env:
    # [private] show the environment
    cmds:
      - python --version
      - hatch env show

  update-venv:
    cmds:
      # [private] update development virtual environment
      - hatch -e dev run pip install --upgrade pip
      # install project into virtual environment
      - hatch -e dev run pip install --no-deps -e .

  validate-pyproject:
    cmds:
      # [private] validate the pyproject.toml file
      - hatch run -- dev:validate-pyproject pyproject.toml

  lint:
    desc: Perform static code analysis.
    cmds:
      - hatch run -- dev:ruff check --config pyproject.toml --fix src tests
      - hatch -e dev run -- scripts/run-mypy-all-python-versions.sh
      - hatch run -- dev:fawltydeps --detailed || true
      - hatch -e dev run -- reuse lint
      - hatch run -- dev:pyupgrade --py311-plus
      # Disallow improper capitalization
      - scripts/fail_on_regex_match.sh "PyBind|Numpy|Cmake|CCache|Github|PyTest"
      # lint shell scripts
      - git ls-files -z -- "*.sh" | xargs -0 hatch -e dev run -- shellcheck

  format:
    desc: Check and reformat the code to a coding standard.
    cmds:
      - hatch run -- dev:ruff format --config pyproject.toml src tests
      - git ls-files -z -- '*.md' '*.py' | xargs -0 --verbose hatch -e dev run
        -- blacken-docs

  check-pyproject:
    desc:
      Check the consistency between poetry and hatch in the pyproject.toml file.
    cmds:
      # check that project and tool.poetry tables are in sync
      - hatch -e dev run -- python3 -m check_pyproject --loglevel INFO

  check-licenses:
    desc: Check that all dependency licenses are acceptable for this project.
    cmds:
      # check licenses
      - hatch -e dev run -- liccheck -s pyproject.toml
      # add any missing copyrights
      - git diff --name-only --cached | xargs -I {} hatch -e dev run -- reuse
        annotate -c "$(git config --get user.name)" "{}"
      # create software bill of materials
      - hatch -e dev run -- reuse spdx -o reuse.spdx

  pre-commit:
    desc: Must pass before allowing version control commit.
    # called from the "pre-commit" hook and the "task build"
    cmds:
      - task: check-pyproject

  build:
    desc: Build the project.
    summary: |
      Build the project

      Format the project, check for code quality, check for compliance,
      perform unit testing, build distributables, build documentation,
      and run the application to display its version.
    cmds:
      # show project's environment
      - task: show-env
      # format the source code
      - task: format
      # check for programming errors/warnings
      - task: lint
      # check that code can be committed to vcs
      - pre-commit run --all-files
      # create dist packages
      - hatch -e dev build
      # install current build into dev virtual environment
      - task: update-venv
      # check licenses
      - task: check-licenses
      # run unit test and generate coverage reports
      - task: coverage
      # generate code metrics
      - task: metrics
      # build documentation
      - task: build-docs
      # actually run the built application, getting its version
      - task: version

  version:
    desc: Run the project, having it return its version.
    cmds:
      - hatch run -- python3 -m {{cookiecutter.project_slug}} --version

  metrics:
    desc: Analyze the code.
    cmds:
      - bash -c "mkdir -p metrics"
      - hatch run -- metrics:radon cc --show-complexity --json --min=A
        --output-file=metrics/code-complexity.json src/
      - hatch run -- cat metrics/code-complexity.json |
        scripts/metrics_cc_filter.py | head -n 20
      - hatch run -- metrics:radon hal --json
        --output-file=metrics/halstead-metrics.json src/
      - hatch run -- metrics:radon mi --json
        --output-file=metrics/maintainability-index.json src/
      - hatch run -- metrics:radon raw --json
        --output-file=metrics/raw-metrics.json src/

  tests:
    desc: Run the unit tests for the supported versions of python.
    cmds:
      - hatch run -- test:test

  coverage:
    desc: Run the unit tests with coverage.
    cmds:
      - hatch run -- test:pytest --cov-report term-missing --cov-report
        json:metrics/coverage.json --cov={{cookiecutter.project_slug}} tests

  docs:
    desc: Create the project documentation and open in the browser.
    cmds:
      - task: build-docs
      - task: serve-docs

  build-docs:
    desc: Build the documentation.
    cmds:
      - hatch run docs:mkdocs build

  serve-docs:
    desc: Start the documentation server and open browser at localhost:8000.
    cmds:
      - hatch run docs:mkdocs serve --open

  clean:
    desc: Remove virtual environments and generated files.
    cmds:
      - hatch env prune
      - rm -rf .tox
      - rm -rf .nox
      - rm -rf dist
      - rm -rf metrics
      - rm -rf site
      - rm -rf tests/__pycache__
      - rm -rf .*_cache

  switch-to-hatch:
    desc: Switch development to use hatch instead of poetry.
    cmds:
      - hatch -e dev run -- python3 scripts/swap_build_system.py hatch
      - task: clean
      - rm -rf Taskfile.yml ; ln -s Taskfile-hatch.yml Taskfile.yml
      - hatch run echo "Creating virtualenv in .venv"
      - task: show-env

  switch-to-poetry:
    desc: Switch development to use poetry instead of hatch.
    cmds:
      - hatch -e dev run -- python3 scripts/swap_build_system.py poetry
      - task: clean
      - rm -rf Taskfile.yml ; ln -s Taskfile-poetry.yml Taskfile.yml
      - poetry config virtualenvs.in-project true
      - poetry lock
      - poetry install
      # show env using poetry
      - poetry env list
      - poetry env info


  main:
    desc:
      "Run the __main__ module code, passing arguments to the module.  Example:
      task main -- --version"
    cmds:
      - hatch -e dev run -- python3 -m {{cookiecutter.project_slug}} {{ '{{' }}.CLI_ARGS{{ '}}' }}
