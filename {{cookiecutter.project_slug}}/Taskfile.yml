version: '3'

tasks:

  init:
    desc: Initialize the project for using poetry
    cmds:
      - poetry init
      - poetry install
      - poetry env list
      - poetry env info
#      - poetry run mkdocs new .

  lint:
    desc: Perform static code analysis
    cmds:
      - poetry run ruff check src tests
      - poetry run fawltydeps --detailed 

  format:
    desc: Check and reformat the code to a coding standard
    cmds:
      - poetry run ruff format src tests

  check:
    desc: Run the raw project script on the project's pyproject.toml file.
    cmds:
      - poetry run check_pyproject

  setup_env:
    cmds:
      # validate the pyproject.toml file
      - poetry check
      # update project dependencies
      - poetry update
      # install project into virtual environment
      - poetry install
      # check that project and tool.poetry tables are in sync
      - poetry run check_pyproject
      # show project's environment
      - poetry env list
      - poetry env info

  build:
    desc: Perform normal build workflow
    cmds:
      - task: setup_env
      - task: lint
      - task: format
      - poetry build
      - task: metrics
      - task: tests
      - task: version

  version:
    desc: run the project, having it return its version
    cmds:
      - poetry run python3 -m {{cookiecutter.project_slug}} -- --version

  metrics:
    desc: Analyze the code
    cmds:
      - bash -c "mkdir -p metrics"
      - poetry run radon cc --show-complexity --json --min=A --output-file=metrics/code-complexity.json src/
      - poetry run radon cc --show-complexity --min=A src/ -- | tail -n +1 | head -10
      - poetry run radon hal --json --output-file=metrics/halstead-metrics.json src/
      - poetry run radon mi --json --output-file=metrics/maintainability-index.json src/
      - poetry run radon raw --json --output-file=metrics/raw-metrics.json src/

  tests:
    desc: Test the code
    cmds:
      - poetry run pytest --cov-report term-missing --cov-report json:metrics/coverage.json --cov={{cookiecutter.project_slug}} tests
      - poetry run tox

  docs:
    cmds:
      - poetry run mkdocs build
      - poetry run mkdocs serve
      - open localhost:8000

  clean:
    desc: Remove virtual environments and generated files
    cmds:
      - poetry env remove --all
      - poetry env list
      - poetry env info
      - rm -rf .tox
      - rm -rf dist
      - rm -rf metrics
      - rm -rf site
      - rm -rf tests/__pycache__

  main:
    desc: Run the __main__ module code, passes arguments to the module
    cmds:
      - poetry run python3 -m {{cookiecutter.project_slug}} {{ '{{' }}.CLI_ARGS{{ '}}' }}
