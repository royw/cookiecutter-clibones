# This file is generated by the pre_build.py script.
# DO NOT MANUALLY EDIT THIS FILE!  Edit the ../README.md file instead.
#
# The pre_build.py script populates this file with:
#
# __version__  set to the application's version from the pyproject.toml file.
# __doc__      set to the contents of the project's README.md file.

__version__ = "0.1.1"
__doc__ = """
CLI Bones

This is a CLI application framework based on the argparse standard library.

The architecture used is a Settings context manager that handles all the command line argument definition, parsing, and validation.

So in general, for each command line argument you ought to:
* add a help message to Settings.HELP dictionary,
* optionally add an argument group to the parser in Settings._cli_options
* add argument to the parser in Settings._cli_options
* optionally add validation to Settings._cli_validate

Refer to application_settings.py which implements help and logging as examples.

Next take a look at main.main() which demonstrates the use of the Settings context manager.  This example also demonstrates using the GracefulInterruptHandler context manager which will capture the ^C interrupt signal.

Finally, you will notice the TODO for adding your application code.

The Settings does have a few extra features including:
* help is terminal aware and will print up to the full width of the terminal.
* config files are supported for any command arguments you want to persist.
* standard logging setup via command line arguments.
"""
