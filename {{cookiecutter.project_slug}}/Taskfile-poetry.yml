# SPDX-FileCopyrightText: 2024 Roy Wright
#
# SPDX-License-Identifier: MIT

version: "3"

tasks:
  show-env:
    cmds:
      - poetry env list
      - poetry env info

  update-venv:
    cmds:
      # update project dependencies
      - poetry update
      # install project into virtual environment
      - poetry install

  validate-pyproject:
    cmds:
      # validate the pyproject.toml file
      - poetry check
      - poetry run -- validate-pyproject pyproject.toml

  check-pyproject:
    cmds:
      # check that project and tool.poetry tables are in sync
      - poetry run -- python3 -m check_pyproject --loglevel INFO

  init:
    desc: Initialize the project for using poetry
    cmds:
      - task: switch-to-poetry
      - task: show-env

  lint:
    desc: Perform static code analysis
    cmds:
      - poetry run -- ruff check --config pyproject.toml --fix src tests
      - poetry run -- mypy --strict --python-version 3.11 src/ tests/
      - poetry run -- mypy --strict --python-version 3.12 src/ tests/
      - poetry run -- fawltydeps --detailed || true
      - poetry run -- reuse lint
      - poetry run -- pyupgrade --py311-plus
      # Disallow improper capitalization
      - scripts/fail_on_regex_match.sh "PyBind|Numpy|Cmake|CCache|Github|PyTest"
      # lint shell scripts
      - git ls-files -z -- "*.sh" | xargs -0 poetry run -- shellcheck

  format:
    desc: Check and reformat the code to a coding standard
    cmds:
      - poetry run -- ruff format --config pyproject.toml src tests
      - git ls-files -z -- '*.md' '*.py' | xargs -0 --verbose poetry run --
        blacken-docs

  check:
    desc: Run the raw project script on the project's pyproject.toml file.
    cmds:
      - task: update-venv
      - poetry run -- python3 -m check_pyproject --loglevel DEBUG

  check-licenses:
    desc: Check that all dependency licenses are acceptable for this project
    cmds:
      # check licenses
      - poetry run -- liccheck -s pyproject.toml
      # add any missing copyrights
      - git diff --name-only --cached | xargs -I {} poetry run -- reuse annotate
        -c "$(git config --get user.name) <$(git config --get user.email)>" "{}"
      # create software bill of materials
      - poetry run -- reuse spdx -o reuse.spdx

  pre-commit:
    desc: Must pass before allowing version control commit
    cmds:
      - task: pre-commit-1
      - task: pre-commit-2

  pre-commit-1:
    cmds:
      - task: validate-pyproject
      - task: update-venv
      - task: check-pyproject
      # format the source code
      - task: format
      # check for programming errors/warnings
      - task: lint

  pre-commit-2:
    cmds:
      # generate code metrics
      - task: check-licenses
      # run unit tests
      - task: tests

  build:
    desc: Perform normal build workflow
    cmds:
      # show project's environment
      - task: show-env
      - task: pre-commit-1
      # create dist packages
      - poetry build
      - task: update-venv
      - task: pre-commit-2
      # generate unit test coverage reports
      - task: coverage
      # generate code metrics
      - task: metrics
      # build documentation
      - task: build-docs
      # actually run the built application, getting its version
      - task: version

  version:
    desc: run the project, having it return its version
    cmds:
      - poetry run -- python3 -m {{cookiecutter.project_slug}} --version

  metrics:
    desc: Analyze the code
    cmds:
      - bash -c "mkdir -p metrics"
      - poetry run -- radon cc --show-complexity --json --min=A
        --output-file=metrics/code-complexity.json src/
      - poetry run -- radon cc --show-complexity --min=A src/ -- | tail -n +1 |
        head -10
      - poetry run -- radon hal --json
        --output-file=metrics/halstead-metrics.json src/
      - poetry run -- radon mi --json
        --output-file=metrics/maintainability-index.json src/
      - poetry run -- radon raw --json --output-file=metrics/raw-metrics.json
        src/

  tests:
    desc: Run the unit tests for the supported versions
    cmds:
      - poetry run -- pytest tests
      - poetry run -- tox

  coverage:
    desc: Run the unit tests with coverage
    cmds:
      - poetry run pytest --cov-report term-missing --cov-report
        json:metrics/coverage.json --cov={{cookiecutter.project_slug}} tests

  docs:
    desc: Create the project documentation and open in the browser
    cmds:
      - task: build-docs
      - task: serve-docs

  build-docs:
    desc: Build the documentation
    cmds:
      - poetry run mkdocs build

  serve-docs:
    desc: Start the documentation server and open browser at localhost:8000
    cmds:
      - poetry run mkdocs serve --open

  clean:
    desc: Remove virtual environments and generated files
    cmds:
      - poetry env remove --all
      - rm -rf .tox
      - rm -rf dist
      - rm -rf metrics
      - rm -rf site
      - rm -rf tests/__pycache__
      - rm -rf poetry.lock

  switch-to-hatch:
    desc: Switch development to use hatch instead of poetry
    cmds:
      - poetry run -- python3 scripts/swap_build_system.py hatch
      - task: clean
      - rm -rf Taskfile.yml ; ln -s Taskfile-hatch.yml Taskfile.yml
      - task: show-env

  switch-to-poetry:
    desc: Switch development to use poetry instead of hatch
    cmds:
      - poetry run -- python3 scripts/swap_build_system.py poetry
      - task: clean
      - rm -rf Taskfile.yml ; ln -s Taskfile-poetry.yml Taskfile.yml
      - poetry lock
      - poetry install
      - task: show-env

  main:
    desc: Run the __main__ module code, passes arguments to the module
    cmds:
      - poetry run python3 -m {{cookiecutter.project_slug}} {{ '{{' }}.CLI_ARGS{{ '}}' }}
