# SPDX-FileCopyrightText: 2024 Roy Wright
#
# SPDX-License-Identifier: MIT

# ref: https://packaging.python.org/en/latest/specifications/pyproject-toml

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
# TOML type: string
# The name of the project.
# Tools SHOULD normalize this name, as soon as it is read for internal consistency.
name = "{{cookiecutter.project_slug}}"

# TOML type: string
# The version of the project, as defined in the Version specifier specification.
# Users SHOULD prefer to specify already-normalized versions
version = "{{cookiecutter.version}}"

# TOML type: string
# The summary description of the project in one line. Tools MAY error if this includes multiple lines.
description = "{{cookiecutter.project_short_description}}"

# TOML type: string or table
# The full description of the project (i.e. the README).
#
# The key accepts either a string or a table. If it is a string then it is a path relative to pyproject.toml
# to a text file containing the full description. Tools MUST assume the file’s encoding is UTF-8. If the
# file path ends in a case-insensitive .md suffix, then tools MUST assume the content-type is text/markdown.
# If the file path ends in a case-insensitive .rst, then tools MUST assume the content-type is text/x-rst.
# If a tool recognizes more extensions than this PEP, they MAY infer the content-type for the user without
# specifying this key as dynamic. For all unrecognized suffixes when a content-type is not provided, tools
# MUST raise an error.
#
# more:  https://packaging.python.org/en/latest/specifications/pyproject-toml/#readme
readme = "README.md"

# TOML type: string
# The Python version requirements of the project.
requires-python = ">=3.11"

# TOML type: table
# The table may have one of two keys. The file key has a string value that is a file path relative to
# pyproject.toml to the file which contains the license for the project. Tools MUST assume the file’s
# encoding is UTF-8. The text key has a string value which is the license of the project. These keys are
# mutually exclusive, so a tool MUST raise an error if the metadata specifies both keys.
license = {file = "LICENSES/MIT.txt"}

# TOML type: Array of inline tables with string keys and values
# The people or organizations considered to be the “authors” of the project. The exact meaning is open to
# interpretation — it may list the original or primary authors, current maintainers, or owners of the package.
#
# These keys accept an array of tables with 2 keys: name and email. Both values must be strings. The name
# value MUST be a valid email name (i.e. whatever can be put as a name, before an email, in RFC 822) and not
# contain commas. The email value MUST be a valid email address. Both keys are optional, but at least one of
# the keys must be specified in the table.
#
# more:  https://packaging.python.org/en/latest/specifications/pyproject-toml/#authors-maintainers
authors = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"}
]

# TOML type: Array of inline tables with string keys and values
# The “maintainers” key is similar to “authors” in that its exact meaning is open to interpretation.
maintainers = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"}
]

# TOML type: array of strings
# The keywords for the project.
keywords = ["python", "CLI", "application"]

# TOML type: array of strings
# Trove classifiers (https://pypi.org/classifiers/) which apply to the project.
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3"
]

# TOML type: table with keys and values of strings
# A table of URLs where the key is the URL label and the value is the URL itself.
urls = {"{{cookiecutter.project_slug}}" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"}

# TOML type: array of string
# Specifies which keys listed by this PEP were intentionally unspecified so another tool can/will provide
# such metadata dynamically. This clearly delineates which metadata is purposefully unspecified and expected
# to stay unspecified compared to being provided via tooling later on.
#
# more: https://packaging.python.org/en/latest/specifications/pyproject-toml/#dynamic
dynamic = []

# TOML type: table ([project.scripts], [project.gui-scripts], and [project.entry-points])
# Entry Points
# There are three tables related to entry points. The [project.scripts] table corresponds to the
# console_scripts group in the entry points specification. The key of the table is the name of the entry
# point and the value is the object reference.
#
# more: https://packaging.python.org/en/latest/specifications/pyproject-toml/#entry-points
scripts = {'main' = "{{cookiecutter.project_slug}}.__main__:main"}
#project.gui-scripts = {}
#project.entry-points = {}


# TOML type: Array of PEP 508 strings (dependencies)
# For dependencies, it is a key whose value is an array of strings. Each string represents a dependency of
# the project and MUST be formatted as a valid PEP 508 (https://peps.python.org/pep-0508/) string.
# Each string maps directly to a Requires-Dist entry.
#
# Note: tox needs project dependencies instead of tool.poetry.dependencies
# Also note a different grammar is required for version specification
dependencies = [
  "loguru>=0.7.2, <0.8.0",
  "pathvalidate>=3.2.0, <4.0.0",
]

# TOML type: a table with values of arrays of PEP 508 strings (optional-dependencies)
# For optional-dependencies, it is a table where each key specifies an extra and whose value is an array of
# strings. The strings of the arrays must be valid PEP 508 strings. The keys MUST be valid values for
# Provides-Extra. Each value in the array thus becomes a corresponding Requires-Dist entry for the matching
# Provides-Extra metadata.
[project.optional-dependencies]
dev = [
  "pytest>=8.1.1, <9.0.0",
  "pytest-cov<6.0.0,>=5.0.0",
  "fawltydeps<0.16.0,>=0.15.0",
  "ruff<0.5.0,>=0.4.7",
  "pre-commit>=3.7.1,<4.0.0",
  "validate-pyproject>=0.18.0,<0.19.0",
  "tox<5.0.0,>=4.14.2",
  "reuse<4.0.0,>=3.0.2",
  "tomlkit<0.13.0,>=0.12.5",
  "check-pyproject@git+https://github.com/royw/check_pyproject.git",
]
test = [
  "pytest>=8.1.1, <9.0.0",
  "pytest-cov<6.0.0,>=5.0.0",
]
metrics = [
  "pytest<9.0.0,>=8.1.1",
  "pytest-cov<6.0.0,>=5.0.0",
  "radon<7.0.0,>=6.0.1",
]
docs = [
  "mkdocs<2.0.0,>=1.6.0",
  "mkdocstrings-python<2.0.0,>=1.10.3",
  "mkdocs-gen-files<0.6.0,>=0.5.0",
  "mkdocs-literate-nav<0.7.0,>=0.6.1",
  "mkdocs-section-index<0.4.0,>=0.3.9",
  "mkdocs-material<10.0.0,>=9.5.25",
]
sphinx = [
  "sphinx<8.0.0,>=7.3.7",
  "sphinx-autodoc-typehints<3.0.0,>=2.1.1",
  "sphinx_copybutton>=0.5.2,<0.6.0",
  "furo>=2024.5.6,<2025.0.0",
  "myst-parser<4.0.0,>=3.0.1",
]

### Hatch build system

[tool.hatch.metadata]
allow-direct-references = true

# environment scripts allow you to assign a command to an alias
# for example:
# test = "pytest {args}"
# assigns the command "pytest {args}" to test.
# to use: `hatch run test arg...`
# note, you can access dependencies without adding a script entry, for example:
# `hatch run pytest`

[tool.hatch.envs.default]
features = ["test"]

[tool.hatch.envs.default.scripts]

[tool.hatch.envs.dev]
features = ["dev"]

[tool.hatch.envs.dev.scripts]
test = "pytest {args}"

[tool.hatch.envs.test]
features = ["test"]

[tool.hatch.envs.test.scripts]
test = "pytest {args}"

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.docs]
features = ["docs"]
dependencies = [
  "mkdocs"
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

[tool.hatch.envs.sphinx]
features = ["sphinx"]

[tool.hatch.envs.metrics]
features = ["metrics"]

### pytest

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra", "--showlocals",
  "--strict-markers",
  "--strict-config",
#  "--import-mode=importlib",
]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
pythonpath = "src/{{cookiecutter.project_slug}}"
testpaths = [
    "tests"
]

### mypy linter

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{cookiecutter.project_slug}}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

### ruff linter/formatter

[tool.ruff]
src = ["src"]
exclude = [".tox", "dist", "docs", "metrics", "scripts", "site"]
# Set the maximum line length to 119.
line-length = 119

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# extend-select = ["E501"]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "S101",     # pytest uses "assert" so allow it
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["scientific python._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

[tool.fawltydeps]
code = ["src"]  # Only search for imports under ./src
deps = ["pyproject.toml"]  # Only look for declared dependencies here
ignore_unused = ["radon", "pytest-cov", "pytest", "tox", "fawltydeps", "mkdocs", "mkdocstrings-python",
  "mkdocs-literate-nav", "mkdocs-section-index", "ruff", "mkdocs-material", "mkdocs-gen-files",
  "check-pyproject"
]
output_format = "human_detailed"  # Detailed report by default

[tool.coverage.run]
source_pkgs = ["{{cookiecutter.project_slug}}"]
branch = true
parallel = true
omit = [
  "src/{{cookiecutter.project_slug}}/__init__.py",
]

[tool.coverage.paths]
source = ["src/{{cookiecutter.project_slug}}"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

### Poetry build system

[tool.poetry]
# Poetry can be operated in two different modes. The default mode is the package mode, which is the right
# mode if you want to package your project into a sdist or a wheel and perhaps publish it to a package
# index. In this mode, some metadata such as name and version, which are required for packaging, are
# mandatory. Further, the project itself will be installed in editable mode when running poetry install.
#package-mode = true

# The name of the package. Required in package mode
name = "{{cookiecutter.project_slug}}"

# The version of the package. Required in package mode
# This should be a valid PEP 440 string.
version = "{{cookiecutter.version}}"

# A short description of the package. Required in package mode
description = "{{cookiecutter.project_short_description}}"

# The license of the package.
# For list of valid licenses, see: https://python-poetry.org/docs/pyproject/#license
license = "MIT"

# The authors of the package. Required in package mode
# This is a list of authors and should contain at least one author. Authors must be in the form name <email>.
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]

# The maintainers of the package. Optional
# This is a list of maintainers and should be distinct from authors. Maintainers may contain an email and be
# in the form name <email>.
maintainers = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]

# A path, or list of paths corresponding to the README file(s) of the package. Optional
# The file(s) can be of any format, but if you intend to publish to PyPI keep the recommendations for a
# PyPI-friendly README in mind. README paths are implicitly relative to pyproject.toml.
# more: https://python-poetry.org/docs/pyproject/#readme
readme = "README.md"

# A URL to the website of the project. Optional
homepage = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"

# A URL to the repository of the project. Optional
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"

# A URL to the documentation of the project. Optional
documentation = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"

# A list of keywords that the package is related to. Optional
keywords = ['python', 'CLI', 'application']

# A list of PyPI trove classifiers that describe the project. Optional
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
]

# A list of packages and modules to include in the final distribution.
# If your project structure differs from the standard one supported by poetry, you can specify the packages
# you want to include in the final distribution.
# more: https://python-poetry.org/docs/pyproject/#packages
#packages = [
#  {include = "my_package", from = "lib", to = "target_package"}
#]

# A list of patterns that will be included in the final package.
#
# You can explicitly specify to Poetry that a set of globs should be ignored or included for the purposes
# of packaging. The globs specified in the exclude field identify a set of files that are not included when
# a package is built.
#
# If a VCS is being used for a package, the exclude field will be seeded with the VCS’ ignore settings
# (.gitignore for git for example).
# more: https://python-poetry.org/docs/pyproject/#include-and-exclude
include = [
    { path = "tests", format = "sdist" },
]

# Poetry is configured to look for dependencies on PyPI by default. Only the name and a version string are
# required in this case.
# more: https://python-poetry.org/docs/pyproject/#dependencies-and-dependency-groups
[tool.poetry.dependencies]
python = "^3.11"
loguru = "^0.7.2"
pathvalidate = "^3.2.0"

# You can organize your dependencies in groups to manage them in a more granular way.
[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
tox = "^4.14.2"
check-pyproject = {git = "https://github.com/royw/check_pyproject.git"}
fawltydeps = "^0.15.0"
ruff = "^0.4.7"
pre-commit = "^3.7.1"
validate-pyproject = "^0.18"
reuse = "^3.0.2"
tomlkit = "^0.12.5"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
pytest-cov = "^5.0.0"

[tool.poetry.group.metrics.dependencies]
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
radon = "^6.0.1"

# This section describes the scripts or executables that will be installed when installing the package.
# When a script is added or updated, run poetry install to make them available in the project’s virtualenv.

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocstrings-python = "^1.10.3"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"
mkdocs-material = "^9.5.25"

[tool.poetry.group.sphinx.dependencies]
sphinx = "^7.3.7"
myst-parser = "^3.0.1"
sphinx-copybutton = "^0.5.2"
sphinx-autodoc-typehints = "^2.1.1"
furo = "^2024.5.6"

[tool.poetry.scripts]
main = "{{cookiecutter.project_slug}}.__main__:main"

# Poetry supports extras to allow expression of:
#
# optional dependencies, which enhance a package, but are not required; and
# clusters of optional dependencies.
# more: https://python-poetry.org/docs/pyproject/#extras

# Poetry supports arbitrary plugins, which are exposed as the ecosystem-standard entry points and
# discoverable using importlib.metadata. This is similar to (and compatible with) the entry points
# feature of setuptools. The syntax for registering a plugin is:
# more: https://python-poetry.org/docs/pyproject/#plugins

# In addition to the basic urls (homepage, repository and documentation), you can specify any custom url
# in the urls section.
[tool.poetry.urls]
"{{cookiecutter.project_slug}}" = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}"
